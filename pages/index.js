import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import CoinGecko from "coingecko-api";

// initialize coin gecko client
const coinGeckoClient = new CoinGecko();

const formatDecimal = (number) => {
  return `${new Number(number.toFixed(2))}%`;
};
const formatDollar = (number, maximumSignificantDigits) => {
  return new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "usd",
    maximumSignificantDigits,
  }).format(number);
};

export default function Home({ response }) {
  console.log(response.data);
  return (
    <div>
      <Head>
        <title>Coinmarketcap Clone</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1>Coinmarketcap Clone</h1>
      <h3>{response.data[0].symbol}</h3>
      <table className="table">
        <thead>
          <tr>
            <th>Symbol</th>
            <th>24H Change</th>
            <th>Price</th>
            <th>Market Cap</th>
          </tr>
        </thead>
        <tbody>
          {response.data.map((coin) => {
            return (
              <tr key={coin.id}>
                <td>
                  <img
                    src={coin.image}
                    alt={coin.symbol}
                    style={{ width: 25, height: 25, marginRight: 10 }}
                  />
                  {coin.symbol.toUpperCase()}
                </td>
                <td>
                  <span
                    className={
                      coin.price_change_percentage_24h > 0
                        ? "text-success"
                        : "text-danger"
                    }
                  >
                    {formatDecimal(coin.price_change_percentage_24h)}
                  </span>
                </td>
                <td>{formatDollar(coin.current_price, 20)}</td>
                <td>{formatDollar(coin.market_cap, 12)}</td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
}

export async function getServerSideProps(context) {
  const params = {
    order: CoinGecko.ORDER.MARKET_CAP_DESC,
  };
  const response = await coinGeckoClient.coins.markets({ params });

  return {
    props: {
      response,
    },
  };
}
